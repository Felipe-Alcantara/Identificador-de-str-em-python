def identificar_string(texto):
    """
    Analisa uma string e retorna uma lista formatada com todas as caracter√≠sticas identificadas.
    
    Args:
        texto (str): String a ser analisada
        
    Returns:
        list: Lista de tuplas contendo (descri√ß√£o, resultado)
    """
    verificacoes = [
        ("√â alfab√©tico?", texto.isalpha()),
        ("√â num√©rico?", texto.isnumeric()),
        ("√â alfanum√©rico?", texto.isalnum()),
        ("Est√° em mai√∫sculo?", texto.isupper()),
        ("Est√° em min√∫sculo?", texto.islower()),
        ("√â um n√∫mero decimal?", texto.isdecimal()),
        ("√â um identificador v√°lido?", texto.isidentifier()),
        ("Pode ser impresso?", texto.isprintable()),
        ("Est√° em formato de t√≠tulo?", texto.istitle()),
        ("√â um d√≠gito?", texto.isdigit()),
        ("Cont√©m apenas espa√ßos?", texto.isspace())
    ]
    
    return verificacoes


def exibir_resultados(texto, resultados):
    """
    Exibe os resultados da an√°lise de forma formatada e organizada.
    
    Args:
        texto (str): String analisada
        resultados (list): Lista de tuplas com os resultados
    """
    print("\n" + "="*60)
    print(f"üìù AN√ÅLISE DA STRING: '{texto}'")
    print(f"üî§ Tipo: {type(texto).__name__}")
    print("="*60)
    
    # Encontra o tamanho da maior descri√ß√£o para alinhar
    max_len = max(len(desc) for desc, _ in resultados)
    
    print("\n‚ú® CARACTER√çSTICAS:\n")
    for descricao, resultado in resultados:
        simbolo = "‚úÖ" if resultado else "‚ùå"
        print(f"  {simbolo} {descricao:<{max_len}} ‚Üí {resultado}")
    
    print("\n" + "="*60)


def main():
    """Fun√ß√£o principal do programa."""
    print("üîç IDENTIFICADOR DE STRINGS EM PYTHON\n")
    
    entrada = input("Digite alguma coisa para an√°lise: ")
    
    # Realiza a an√°lise
    resultados = identificar_string(entrada)
    
    # Exibe os resultados formatados
    exibir_resultados(entrada, resultados)


if __name__ == "__main__":
    main()
